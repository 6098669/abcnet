2023-07-07 10:14:57,455 - mmocr - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]
CUDA available: True
GPU 0,1,2,3: Tesla V100-SXM2-16GB
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.1, V10.1.243
GCC: gcc (GCC) 8.2.0
PyTorch: 1.8.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.1
OpenCV: 4.7.0
MMCV: 1.3.9
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.1
MMOCR: 0.2.1+b40faa8
------------------------------------------------------------

2023-07-07 10:14:57,955 - mmocr - INFO - Distributed training: True
2023-07-07 10:14:58,441 - mmocr - INFO - Config:
find_unused_parameters = True
num_fiducial = 4
tps_size = (0.25, 1)
model = dict(
    type='TPSNet',
    from_p2=True,
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=-1,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        dcn=dict(type='DCNv2', deform_groups=2, fallback_on_stride=False),
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        stage_with_dcn=(False, True, True, True)),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        add_extra_convs='on_output',
        num_outs=4,
        relu_before_extra_convs=True,
        act_cfg=None),
    bbox_head=dict(
        type='TPSHead',
        in_channels=256,
        num_sample=20,
        scales=(8, 16, 32),
        sample_size=(8, 32),
        loss=dict(
            type='TPSLoss',
            gauss_center=False,
            point_loss=True,
            with_BA=True,
            border_relax_thr=0.8),
        num_fiducial=4,
        fiducial_dist='cross',
        nms_thr=0.1,
        num_convs=4),
    recog_head=None)
train_cfg = None
test_cfg = None
dataset_type = 'IcdarE2EDataset'
data_root = 'data/my_synthtext/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='LoadTextAnnotations',
        with_bbox=True,
        with_mask=True,
        poly2mask=False),
    dict(
        type='ColorJitter',
        brightness=0.12549019607843137,
        saturation=0.5,
        contrast=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='RandomScaling', size=1200, scale=(0.375, 2.5)),
    dict(
        type='RandomCropFlip', crop_ratio=0.0, iter_num=1, min_area_ratio=0.2),
    dict(
        type='RandomCropPolyInstancesWithText',
        instance_key='gt_masks',
        crop_ratio=0.8,
        min_side_ratio=0.3),
    dict(
        type='RandomRotatePolyInstances',
        rotate_ratio=0.5,
        max_angle=30,
        pad_with_fixed_color=False),
    dict(type='SquareResizePad', target_size=1200, pad_ratio=0.6),
    dict(type='RandomFlip', flip_ratio=0.5, direction='horizontal'),
    dict(type='Pad', size_divisor=32),
    dict(
        type='TPSTargets',
        level_proportion_range=((0, 0.25), (0.2, 0.65), (0.55, 1.0)),
        tps_size=(0.25, 1),
        with_area=True,
        reoder=True,
        gauss_center=False),
    dict(
        type='CustomFormatBundle',
        keys=['polygons_area', 'gt_texts', 'lv_tps_coeffs', 'tps_polys'],
        visualize=dict(flag=False, boundary_key=None)),
    dict(
        type='Collect',
        keys=[
            'img', 'p3_maps', 'p4_maps', 'p5_maps', 'polygons_area',
            'gt_texts', 'lv_tps_coeffs', 'tps_polys'
        ])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1800, 1000),
        flip=False,
        transforms=[
            dict(type='Resize', img_scale=(1280, 800), keep_ratio=True),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    val_dataloader=dict(samples_per_gpu=1),
    test_dataloader=dict(samples_per_gpu=1),
    train=dict(
        type='RepeatDataset',
        times=5,
        dataset=dict(
            type='IcdarE2EDataset',
            ann_file=['./totaltext_train.json'],
            img_prefix=['./imgs/training'],
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(
                    type='LoadTextAnnotations',
                    with_bbox=True,
                    with_mask=True,
                    poly2mask=False),
                dict(
                    type='ColorJitter',
                    brightness=0.12549019607843137,
                    saturation=0.5,
                    contrast=0.5),
                dict(
                    type='Normalize',
                    mean=[123.675, 116.28, 103.53],
                    std=[58.395, 57.12, 57.375],
                    to_rgb=True),
                dict(type='RandomScaling', size=1200, scale=(0.375, 2.5)),
                dict(
                    type='RandomCropFlip',
                    crop_ratio=0.0,
                    iter_num=1,
                    min_area_ratio=0.2),
                dict(
                    type='RandomCropPolyInstancesWithText',
                    instance_key='gt_masks',
                    crop_ratio=0.8,
                    min_side_ratio=0.3),
                dict(
                    type='RandomRotatePolyInstances',
                    rotate_ratio=0.5,
                    max_angle=30,
                    pad_with_fixed_color=False),
                dict(type='SquareResizePad', target_size=1200, pad_ratio=0.6),
                dict(
                    type='RandomFlip', flip_ratio=0.5, direction='horizontal'),
                dict(type='Pad', size_divisor=32),
                dict(
                    type='TPSTargets',
                    level_proportion_range=((0, 0.25), (0.2, 0.65), (0.55,
                                                                     1.0)),
                    tps_size=(0.25, 1),
                    with_area=True,
                    reoder=True,
                    gauss_center=False),
                dict(
                    type='CustomFormatBundle',
                    keys=[
                        'polygons_area', 'gt_texts', 'lv_tps_coeffs',
                        'tps_polys'
                    ],
                    visualize=dict(flag=False, boundary_key=None)),
                dict(
                    type='Collect',
                    keys=[
                        'img', 'p3_maps', 'p4_maps', 'p5_maps',
                        'polygons_area', 'gt_texts', 'lv_tps_coeffs',
                        'tps_polys'
                    ])
            ])),
    val=dict(
        type='IcdarE2EDataset',
        ann_file='./totaltext_test.json',
        img_prefix='./imgs',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1800, 1000),
                flip=False,
                transforms=[
                    dict(
                        type='Resize', img_scale=(1280, 800), keep_ratio=True),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='IcdarE2EDataset',
        ann_file='./totaltext_test.json',
        img_prefix='./imgs',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1800, 1000),
                flip=False,
                transforms=[
                    dict(
                        type='Resize', img_scale=(1280, 800), keep_ratio=True),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='hmean-e2e')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='poly',
    power=0.9,
    min_lr=1e-07,
    by_epoch=True,
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001)
total_epochs = 100
checkpoint_config = dict(interval=1)
log_config = dict(interval=20, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = 'work_dirs/pretrain'
gpu_ids = range(0, 4)

2023-07-07 10:15:02,277 - mmocr - INFO - Set random seed to 1761697580, deterministic: False
2023-07-07 10:15:03,672 - mmocr - INFO - Start running, host: root@yq01-sys-hic-k8s-v100-box-a223-0027.yq01.baidu.com, work_dir: /root/paddlejob/workspace/code/TPSNet-seed/work_dirs/pretrain
2023-07-07 10:15:03,672 - mmocr - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-07-07 10:15:03,673 - mmocr - INFO - workflow: [('train', 1)], max: 100 epochs
